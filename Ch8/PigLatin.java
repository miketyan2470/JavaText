package javaCh8;

import acm.program.*;
import java.util.*;
/**
 * File : PigLatin.java
 * --------------------
 * Console program takes user entered line of text and converts each word into PigLatin.
 * PigLatin rules are as follows:
 * -If word begins with vowel, add "way" to the end of word.
 * -If word begins with consonant, extract the set of consonants up to the first vowel, 
 * 	move that set to the end of the word, and add "ay".
 */
public class PigLatin extends ConsoleProgram {
	// Private constants.
	private static final String DELIMITERS = "!@#$%^&*()_+={[}]:;\"'<,>.?/~`|\\ ";
	
	public void run() {
		println("This program translate a line of english into Pig Latin.");
		println();
		String line = readLine("Enter a line: ");
		println(translateLine(line));
	}
	/**
	 * Translates a line to PigLatin, word by word.
	 * @param line String that user enters.
	 * @return String in PigLatin.
	 */
	private String translateLine(String line) {
		String result = "";
		// StringTokenizer breaks up the String into tokens, including set DELIMITERS.
		StringTokenizer tokenizer = new StringTokenizer(line, DELIMITERS, true);
		// Loops each token into translator if it is a word, not a delimiter.
		while (tokenizer.hasMoreTokens()) {
			String token = tokenizer.nextToken();
			if (isWord(token)) {
				token = translateWord(token);
			}
			result += token;
		}
		return result;
	}
	/**
	 * Determines if token is word.
	 * @param token SubString of user entered String.
	 * @return Returns boolean true if all characters are letters, otherwise returns false.
	 */
	private boolean isWord(String token) {
		for (int i = 0; i < token.length(); i++) {
			char ch = token.charAt(i);
			// Checks each character in token to see if it is a letter.
			if (!Character.isLetter(ch)) return false;
		}
		return true;
	}
	/**
	 * Translate each word generated into PigLatin.
	 * @param word String token generated by StringTokenizer.
	 * @return Returns String with appropriate PigLatin modifications.
	 */
	private String translateWord(String word) {
		int vp = findFirstVowel(word);
		// Determines if String is a word, then determines if which way to modify. 
		if (vp == -1) {
			return word;
		} else if (vp == 0) {
			return word + "way";
		} else {	
			String head = word.substring(0,  vp);
			String tail = word.substring(vp);
			return tail + head + "ay";
		}
	}
	/**
	 * Finds first vowel in String word.
	 * @param word String given to be analyzed for vowel placement.
	 * @return Returns index of first vowel, returns "-1" if no vowel present.
	 */
	private int findFirstVowel(String word) {
		for (int i = 0; i < word.length(); i++) {
			if (isEnglishVowel(word.charAt(i))) return i;
		}
		return -1;
	}
	/**
	 * Determines if character is a vowel.
	 * @param ch Character from String word.
	 * @return Returns true if ch is a vowel, otherwise returns false.
	 */
	private boolean isEnglishVowel(char ch) {
		switch (Character.toLowerCase(ch)) {
			case 'a': case 'e': case 'i': case 'o': case 'u':
				return true;
			default:
				return false;
		}
	}
}